#!/usr/bin/env node

const Reset = "\x1b[0m";
const Bright = "\x1b[1m";
const Dim = "\x1b[2m";
const Underscore = "\x1b[4m";
const Blink = "\x1b[5m";
const Reverse = "\x1b[7m";
const Hidden = "\x1b[8m";

const FgBlack = "\x1b[30m";
const FgRed = "\x1b[31m";
const FgGreen = "\x1b[32m";
const FgYellow = "\x1b[33m";
const FgBlue = "\x1b[34m";
const FgMagenta = "\x1b[35m";
const FgCyan = "\x1b[36m";
const FgWhite = "\x1b[37m";

const BgBlack = "\x1b[40m";
const BgRed = "\x1b[41m";
const BgGreen = "\x1b[42m";
const BgYellow = "\x1b[43m";
const BgBlue = "\x1b[44m";
const BgMagenta = "\x1b[45m";
const BgCyan = "\x1b[46m";
const BgWhite = "\x1b[47m";

async function getSouthKoreaCovidData() {
  // TDOO automate this data collection. The South Korean data comes from a javascript-required web app without an API. Data for individual dates are addressable, eg. https://www.cdc.go.kr/board/board.es?mid=&bid=0030&act=view&list_no=366627&tag=&nPage=1, but not discoverable without scraping them from the index page https://www.cdc.go.kr/board/board.es?mid=&bid=0030.
  // TODO add strong typing, maybe translate this prototype into Scala

  // How to add new entries to the hardcoded data:
  //  1. go here https://www.cdc.go.kr/board/board.es?mid=&bid=0030
  //  2. find a post for the next day, like "The updates on COVID-19 in Korea as of 23 March"
  //  3. update my sheet "COVID growth in USA vs South Korea" https://docs.google.com/spreadsheets/d/1hLOUe2QYKK1h8lmnYDK77J3q-MpkyS3KgXNtA098f6E/edit#gid=0
  //  4. copy values from sheet into this script

  // Data type should be equivalent to the subset we're using of the type at https://covidtracking.com/api/us/daily
  return Promise.resolve([
    {
      date: 20200323,
      positive: 8961,
      negative: 315447,
      pending: 13628,
    },
    {
      date: 20200322,
      positive: 8897,
      negative: 308343,
      pending: 14540,
    },
    {
      date: 20200321,
      positive: 8799,
      negative: 303006,
      pending: 15704,
    },
    {
      date: 20200320,
      positive: 8652,
      negative: 292487,
      pending: 15525,
    },
    {
      date: 20200319,
      positive: 8565,
      negative: 282555,
      pending: 15904,
    },
    {
      date: 20200318,
      positive: 8413,
      negative: 270888,
      pending: 16346,
    },
    {
      date: 20200317,
      positive: 8320,
      negative: 261105,
      pending: 17291,
    },
  ].map(o => {
    o.posNeg = o.positive + o.negative;
    o.total = o.positive + o.negative + o.pending;
    return o;
  }));
}

async function getUSACovidData() {
  return new Promise((resolve, reject) => {
    const https = require('https');
    https.get("https://covidtracking.com/api/us/daily", (resp) => {
      let data = '';
      resp.on('data', (chunk) => {
        data += chunk;
      });
      resp.on('end', () => {
        try {
          resolve(JSON.parse(data));
        } catch(e) {
          reject(e);
        }
      });
    }).on("error", reject);
  });
}

async function report() {
  const d = await getUSACovidData();
  const sk = await getSouthKoreaCovidData();

  const mostRecentDay = d[0];
  const dayBeforeMostRecent = d[1];
  const twoDaysBeforeMostRecent = d[2];
  const threeDaysBeforeMostRecent = d[3];

  const mostRecentDaySK = sk[0];
  const dayBeforeMostRecentSK = sk[1];
  const twoDaysBeforeMostRecentSK = sk[2];
  const threeDaysBeforeMostRecentSK = sk[3];

  const r = `${reportOne(dayBeforeMostRecent, mostRecentDay, dayBeforeMostRecentSK, mostRecentDaySK)}

${reportOne(twoDaysBeforeMostRecent, mostRecentDay, twoDaysBeforeMostRecentSK, mostRecentDaySK)}

${reportOne(threeDaysBeforeMostRecent, mostRecentDay, threeDaysBeforeMostRecentSK, mostRecentDaySK)}

FAQ
  Q: Which data?
  A: Data for just USA from https://covidtracking.com

  Q: What's "total case growth"?
  A: Percent growth in total cumulative people with the virus.

  Q: What's "total test growth"?
  A: Percent growth in total cumulative tests done to see if people have the virus.

  Q: What's "positivity rate"?
  A: Percent of newly tested people that test positive, ie. do have the virus.

  Q: What's up with "percent of newly tested people that have the virus"?
  A: In South Korea this number is about 1%. Ie. in South Korea 99% of people
     newly tested for covid don't have the virus. If America can get this
     number lower then that may be evidence that we are starting to control
     the virus.`;

  console.log(r);

  function renderOneDaysData(day) {
    return `${day.date} `
  }

  function reportOne(dayEarlier, dayLater, dayEarlierSK, dayLaterSK) {
    const d = delta(dayEarlier, dayLater);
    const sk = delta(dayEarlierSK, dayLaterSK);
    return `For ${dayLater.date - dayEarlier.date} days ending ${dayLater.date} ${dayLater.date === dayLaterSK.date ? '' : `(${dayLaterSK.date} in SK)`}
  total case growth    US: ${renderPercent(d.percentGrowthInPositive)}    SK: ${renderPercent(sk.percentGrowthInPositive)}
  total test growth    US: ${renderPercent(d.percentGrowthInTotalTests)}    SK: ${renderPercent(sk.percentGrowthInTotalTests)}
  positivity rate      US: ${renderPercent(d.percentNewTestResultsThatArePositive)}    SK: ${renderPercent(sk.percentNewTestResultsThatArePositive)}`;
  }

  function renderPercent(pct) {
    return `${Math.round(pct * 1000) / 10}%`.padEnd(6);
  }

  function delta(dayEarlier, dayLater) {
    const positiveDelta = dayLater.positive - dayEarlier.positive;
    const negativeDelta = dayLater.negative - dayEarlier.negative;
    const posNegDelta = dayLater.posNeg - dayEarlier.posNeg;
    const percentNewTestResultsThatArePositive = positiveDelta / posNegDelta;
    const percentGrowthInPositive = dayLater.positive / dayEarlier.positive - 1;
    const percentGrowthInTotalTests = dayLater.total / dayEarlier.total - 1;
    return {
      positiveDelta,
      negativeDelta,
      posNegDelta,
      percentNewTestResultsThatArePositive,
      percentGrowthInPositive,
      percentGrowthInTotalTests,
    };
  }
}

report();
